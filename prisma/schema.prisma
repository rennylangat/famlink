// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RelationshipType {
  SPOUSE
  PARENT_OF
}

// Defines the privacy levels for a family tree.
enum PrivacyLevel {
  PRIVATE // Only owner and invited collaborators can see
  PUBLIC // Anyone with the link can view
}

// --- CORE MODELS ---

// Model for User (maps to Supabase auth.users)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  metadata  Json?

  // Relations
  families Family[]

  @@map("users")
}

// Model for a Family. This is the main container.
model Family {
  id              String       @id @default(uuid())
  ownerId         String       @map("owner_id")
  name            String       @map("name")
  description     String?
  countryOfOrigin String?      @map("country_of_origin")
  privacyLevel    PrivacyLevel @default(PRIVATE) @map("privacy_level")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  metadata        Json?

  // Relations
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  persons Person[]

  @@map("family")
}

// Model for a Person in the family.
model Person {
  id              String    @id @default(uuid())
  familyId        String    @map("family_id")
  firstName       String    @map("first_name")
  lastName        String?   @map("last_name")
  maidenName      String?   @map("maiden_name")
  gender          String?
  bio             String?
  profileImageUrl String?   @map("profile_image_url")
  dateOfBirth     DateTime? @map("date_of_birth")
  dateOfDeath     DateTime? @map("date_of_death")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  metadata        Json?

  // Relations
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  // A person can be the "from" person in many relationships
  relationshipsFrom Relationship[] @relation("FromPerson")
  // A person can be the "to" person in many relationships
  relationshipsTo   Relationship[] @relation("ToPerson")

  @@index([familyId])
  @@map("person")
}

// Model for defining the relationship between two people.
model Relationship {
  id               Int              @id @default(autoincrement())
  fromPersonId     String           @map("from_person_id")
  toPersonId       String           @map("to_person_id")
  relationshipType RelationshipType @map("relationship_type")
  startDate        DateTime?        @map("start_date") // e.g., marriage date
  endDate          DateTime?        @map("end_date") // e.g., divorce date

  // Relations
  fromPerson Person @relation("FromPerson", fields: [fromPersonId], references: [id], onDelete: Cascade)
  toPerson   Person @relation("ToPerson", fields: [toPersonId], references: [id], onDelete: Cascade)

  @@unique([fromPersonId, toPersonId, relationshipType]) // Ensures a specific relationship type between two people is unique
  @@map("relationships")
}
